// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payment.sql

package db

import (
	"context"
	"time"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    payment_key,
    amount,
    payment_method_id,
    status,
    date,
    updated_at
)  
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, payment_key, amount, payment_method_id, status, date, updated_at
`

type CreatePaymentParams struct {
	PaymentKey      string    `json:"payment_key"`
	Amount          string    `json:"amount"`
	PaymentMethodID int32     `json:"payment_method_id"`
	Status          string    `json:"status"`
	Date            time.Time `json:"date"`
	UpdatedAt       time.Time `json:"updated_at"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.PaymentKey,
		arg.Amount,
		arg.PaymentMethodID,
		arg.Status,
		arg.Date,
		arg.UpdatedAt,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.PaymentKey,
		&i.Amount,
		&i.PaymentMethodID,
		&i.Status,
		&i.Date,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, payment_key, amount, payment_method_id, status, date, updated_at FROM payments
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id int32) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.PaymentKey,
		&i.Amount,
		&i.PaymentMethodID,
		&i.Status,
		&i.Date,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByPaymentKey = `-- name: GetPaymentByPaymentKey :one
SELECT id, payment_key, amount, payment_method_id, status, date, updated_at FROM payments
WHERE payment_key = $1
LIMIT 1
`

func (q *Queries) GetPaymentByPaymentKey(ctx context.Context, paymentKey string) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByPaymentKey, paymentKey)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.PaymentKey,
		&i.Amount,
		&i.PaymentMethodID,
		&i.Status,
		&i.Date,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaymentStatusByPaymentKey = `-- name: UpdatePaymentStatusByPaymentKey :exec
UPDATE payments
SET status = $2
WHERE payment_key=$1
`

type UpdatePaymentStatusByPaymentKeyParams struct {
	PaymentKey string `json:"payment_key"`
	Status     string `json:"status"`
}

func (q *Queries) UpdatePaymentStatusByPaymentKey(ctx context.Context, arg UpdatePaymentStatusByPaymentKeyParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentStatusByPaymentKey, arg.PaymentKey, arg.Status)
	return err
}
