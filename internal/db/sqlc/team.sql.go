// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: team.sql

package db

import (
	"context"
	"database/sql"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
    name,
    stadium_id,
    logo
)
VALUES ($1, $2, $3)
RETURNING id, name, stadium_id, logo
`

type CreateTeamParams struct {
	Name      string         `json:"name"`
	StadiumID int32          `json:"stadium_id"`
	Logo      sql.NullString `json:"logo"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Name, arg.StadiumID, arg.Logo)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StadiumID,
		&i.Logo,
	)
	return i, err
}

const getTeamByID = `-- name: GetTeamByID :one
SELECT id, name, stadium_id, logo FROM teams
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeamByID(ctx context.Context, id int32) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamByID, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StadiumID,
		&i.Logo,
	)
	return i, err
}

const listTeams = `-- name: ListTeams :many
SELECT id, name, stadium_id, logo FROM teams
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTeamsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTeams(ctx context.Context, arg ListTeamsParams) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeams, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Team{}
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StadiumID,
			&i.Logo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeam = `-- name: UpdateTeam :exec
UPDATE teams
SET name = coalesce($2, name),
    stadium_id = coalesce($3, stadium_id),
    logo = coalesce($4, logo)
WHERE id=$1
`

type UpdateTeamParams struct {
	ID        int32          `json:"id"`
	Name      sql.NullString `json:"name"`
	StadiumID sql.NullInt32  `json:"stadium_id"`
	Logo      sql.NullString `json:"logo"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) error {
	_, err := q.db.ExecContext(ctx, updateTeam,
		arg.ID,
		arg.Name,
		arg.StadiumID,
		arg.Logo,
	)
	return err
}
