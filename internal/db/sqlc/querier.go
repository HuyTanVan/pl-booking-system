// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	CreateEmailVerificationToken(ctx context.Context, arg CreateEmailVerificationTokenParams) (EmailVerificationToken, error)
	CreateIdempotency(ctx context.Context, arg CreateIdempotencyParams) (Idempotency, error)
	CreateMatch(ctx context.Context, arg CreateMatchParams) (Match, error)
	CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error)
	CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error)
	CreateSeat(ctx context.Context, arg CreateSeatParams) (Seat, error)
	CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error)
	CreateStadium(ctx context.Context, arg CreateStadiumParams) (Stadium, error)
	CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error)
	CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	// a query getting data needed for homepage
	FetchHomePageDetails(ctx context.Context, arg FetchHomePageDetailsParams) ([]FetchHomePageDetailsRow, error)
	GetEVTokenByUserID(ctx context.Context, userID int32) (EmailVerificationToken, error)
	GetIdempotencyByIdempotencyKey(ctx context.Context, idempotencyKey string) (Idempotency, error)
	GetIdempotencyByUserID(ctx context.Context, userID int32) (Idempotency, error)
	// -- name: ListMatchesWithDetails :many
	// SELECT
	//   m.*,
	//   home_team.name AS home_team_name,
	//   away_team.name AS away_team_name,
	//   stadium.name AS stadium_name
	// FROM matches m
	// LEFT JOIN teams AS home_team ON m.home_team_id = home_team.id
	// LEFT JOIN teams AS away_team ON m.away_team_id = away_team.id
	// LEFT JOIN stadiums AS stadium ON m.stadium_id = stadium.id
	// ORDER BY m.match_date
	// LIMIT $1
	// OFFSET $2;
	GetMatchByID(ctx context.Context, id int32) (Match, error)
	GetOrderByID(ctx context.Context, id int32) (Order, error)
	GetOrderByPaymentKey(ctx context.Context, paymentKey string) (Order, error)
	GetPaymentByID(ctx context.Context, id int32) (Payment, error)
	GetPaymentByPaymentKey(ctx context.Context, paymentKey string) (Payment, error)
	GetSeatByID(ctx context.Context, id int32) (Seat, error)
	GetSession(ctx context.Context, id uuid.UUID) (Session, error)
	GetStadiumByID(ctx context.Context, id int32) (Stadium, error)
	GetStadiumByName(ctx context.Context, name string) (Stadium, error)
	GetTeamByID(ctx context.Context, id int32) (Team, error)
	GetTicketByID(ctx context.Context, id int32) (Ticket, error)
	GetTicketWithDetails(ctx context.Context, id int32) (GetTicketWithDetailsRow, error)
	GetTotalFeesByID(ctx context.Context, id int32) (GetTotalFeesByIDRow, error)
	GetUser(ctx context.Context, id int32) (User, error)
	GetUserByEmail(ctx context.Context, email string) (User, error)
	GetUserByID(ctx context.Context, id int32) (User, error)
	ListMatches(ctx context.Context, arg ListMatchesParams) ([]Match, error)
	ListMatchesWithDetails(ctx context.Context, arg ListMatchesWithDetailsParams) ([]ListMatchesWithDetailsRow, error)
	ListMinPriceOfTicketsByMatch(ctx context.Context) ([]ListMinPriceOfTicketsByMatchRow, error)
	ListSeats(ctx context.Context, arg ListSeatsParams) ([]Seat, error)
	ListSeatsWithDetails(ctx context.Context, arg ListSeatsWithDetailsParams) ([]ListSeatsWithDetailsRow, error)
	ListStadiums(ctx context.Context, arg ListStadiumsParams) ([]Stadium, error)
	ListTeams(ctx context.Context, arg ListTeamsParams) ([]Team, error)
	ListTickets(ctx context.Context, arg ListTicketsParams) ([]Ticket, error)
	// a query getting all tickets belong to a match
	ListTicketsOfMatch(ctx context.Context, arg ListTicketsOfMatchParams) ([]ListTicketsOfMatchRow, error)
	// select t.*,
	// 		s.stadium_id,
	// 		s.block,
	// 		s.row,
	// 		s.is_available
	// from
	// tickets AS t
	// left JOIN seats AS s ON t.seat_id = s.id;
	ListTicketsWithDetails(ctx context.Context, arg ListTicketsWithDetailsParams) ([]ListTicketsWithDetailsRow, error)
	ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error)
	UpdateMatch(ctx context.Context, arg UpdateMatchParams) error
	UpdatePaymentStatusByPaymentKey(ctx context.Context, arg UpdatePaymentStatusByPaymentKeyParams) error
	// -- name: UpdateUser :exec
	// UPDATE payment_methods
	// SET first_name = coalesce(sqlc.narg('first_name'), first_name),
	//     last_name = coalesce(sqlc.narg('last_name'), last_name),
	//     password = coalesce(sqlc.narg('password'), password),
	//     phone_number = coalesce(sqlc.narg('phone_number'), phone_number),
	//     is_active = coalesce(sqlc.narg('is_active'), is_active)
	// WHERE id=$1;
	UpdateSeatAvailable(ctx context.Context, arg UpdateSeatAvailableParams) error
	UpdateStadium(ctx context.Context, arg UpdateStadiumParams) error
	UpdateTeam(ctx context.Context, arg UpdateTeamParams) error
	UpdateTicket(ctx context.Context, arg UpdateTicketParams) error
	UpdateUser(ctx context.Context, arg UpdateUserParams) error
}

var _ Querier = (*Queries)(nil)
