// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: idempotency.sql

package db

import (
	"context"
	"time"
)

const createIdempotency = `-- name: CreateIdempotency :one
INSERT INTO idempotency (
    user_id,
    idempotency_key,
    response_status_code,
    response_headers,
    response_body,
    created_at
)  
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING user_id, idempotency_key, response_status_code, response_headers, response_body, created_at
`

type CreateIdempotencyParams struct {
	UserID             int32     `json:"user_id"`
	IdempotencyKey     string    `json:"idempotency_key"`
	ResponseStatusCode int16     `json:"response_status_code"`
	ResponseHeaders    []byte    `json:"response_headers"`
	ResponseBody       []byte    `json:"response_body"`
	CreatedAt          time.Time `json:"created_at"`
}

func (q *Queries) CreateIdempotency(ctx context.Context, arg CreateIdempotencyParams) (Idempotency, error) {
	row := q.db.QueryRowContext(ctx, createIdempotency,
		arg.UserID,
		arg.IdempotencyKey,
		arg.ResponseStatusCode,
		arg.ResponseHeaders,
		arg.ResponseBody,
		arg.CreatedAt,
	)
	var i Idempotency
	err := row.Scan(
		&i.UserID,
		&i.IdempotencyKey,
		&i.ResponseStatusCode,
		&i.ResponseHeaders,
		&i.ResponseBody,
		&i.CreatedAt,
	)
	return i, err
}

const getIdempotencyByIdempotencyKey = `-- name: GetIdempotencyByIdempotencyKey :one
SELECT user_id, idempotency_key, response_status_code, response_headers, response_body, created_at FROM idempotency
WHERE idempotency_key = $1
LIMIT 1
`

func (q *Queries) GetIdempotencyByIdempotencyKey(ctx context.Context, idempotencyKey string) (Idempotency, error) {
	row := q.db.QueryRowContext(ctx, getIdempotencyByIdempotencyKey, idempotencyKey)
	var i Idempotency
	err := row.Scan(
		&i.UserID,
		&i.IdempotencyKey,
		&i.ResponseStatusCode,
		&i.ResponseHeaders,
		&i.ResponseBody,
		&i.CreatedAt,
	)
	return i, err
}

const getIdempotencyByUserID = `-- name: GetIdempotencyByUserID :one
SELECT user_id, idempotency_key, response_status_code, response_headers, response_body, created_at FROM idempotency
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetIdempotencyByUserID(ctx context.Context, userID int32) (Idempotency, error) {
	row := q.db.QueryRowContext(ctx, getIdempotencyByUserID, userID)
	var i Idempotency
	err := row.Scan(
		&i.UserID,
		&i.IdempotencyKey,
		&i.ResponseStatusCode,
		&i.ResponseHeaders,
		&i.ResponseBody,
		&i.CreatedAt,
	)
	return i, err
}
