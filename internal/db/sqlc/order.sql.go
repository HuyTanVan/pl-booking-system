// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package db

import (
	"context"
	"time"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    user_id,
    ticket_id,
    quantity,
    total_price,
    additional_fees_id,
    payment_key,
    created_at,
    updated_at
)  
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, ticket_id, quantity, total_price, additional_fees_id, payment_key, created_at, updated_at
`

type CreateOrderParams struct {
	UserID           int32     `json:"user_id"`
	TicketID         int32     `json:"ticket_id"`
	Quantity         int32     `json:"quantity"`
	TotalPrice       string    `json:"total_price"`
	AdditionalFeesID int32     `json:"additional_fees_id"`
	PaymentKey       string    `json:"payment_key"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.TicketID,
		arg.Quantity,
		arg.TotalPrice,
		arg.AdditionalFeesID,
		arg.PaymentKey,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.Quantity,
		&i.TotalPrice,
		&i.AdditionalFeesID,
		&i.PaymentKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, ticket_id, quantity, total_price, additional_fees_id, payment_key, created_at, updated_at FROM orders
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.Quantity,
		&i.TotalPrice,
		&i.AdditionalFeesID,
		&i.PaymentKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByPaymentKey = `-- name: GetOrderByPaymentKey :one
SELECT id, user_id, ticket_id, quantity, total_price, additional_fees_id, payment_key, created_at, updated_at FROM orders
WHERE payment_key = $1
LIMIT 1
`

func (q *Queries) GetOrderByPaymentKey(ctx context.Context, paymentKey string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByPaymentKey, paymentKey)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.Quantity,
		&i.TotalPrice,
		&i.AdditionalFeesID,
		&i.PaymentKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
