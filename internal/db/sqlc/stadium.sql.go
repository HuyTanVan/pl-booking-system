// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: stadium.sql

package db

import (
	"context"
	"database/sql"
)

const createStadium = `-- name: CreateStadium :one
INSERT INTO stadiums (
    name,
    location,
    capacity,
    is_available
)
VALUES ($1, $2, $3, $4)
RETURNING id, name, location, capacity, is_available
`

type CreateStadiumParams struct {
	Name        string `json:"name"`
	Location    string `json:"location"`
	Capacity    int32  `json:"capacity"`
	IsAvailable bool   `json:"is_available"`
}

func (q *Queries) CreateStadium(ctx context.Context, arg CreateStadiumParams) (Stadium, error) {
	row := q.db.QueryRowContext(ctx, createStadium,
		arg.Name,
		arg.Location,
		arg.Capacity,
		arg.IsAvailable,
	)
	var i Stadium
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Capacity,
		&i.IsAvailable,
	)
	return i, err
}

const getStadiumByID = `-- name: GetStadiumByID :one
SELECT id, name, location, capacity, is_available FROM stadiums
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetStadiumByID(ctx context.Context, id int32) (Stadium, error) {
	row := q.db.QueryRowContext(ctx, getStadiumByID, id)
	var i Stadium
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Capacity,
		&i.IsAvailable,
	)
	return i, err
}

const getStadiumByName = `-- name: GetStadiumByName :one
SELECT id, name, location, capacity, is_available FROM stadiums
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetStadiumByName(ctx context.Context, name string) (Stadium, error) {
	row := q.db.QueryRowContext(ctx, getStadiumByName, name)
	var i Stadium
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Capacity,
		&i.IsAvailable,
	)
	return i, err
}

const listStadiums = `-- name: ListStadiums :many
SELECT id, name, location, capacity, is_available FROM stadiums
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListStadiumsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStadiums(ctx context.Context, arg ListStadiumsParams) ([]Stadium, error) {
	rows, err := q.db.QueryContext(ctx, listStadiums, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Stadium{}
	for rows.Next() {
		var i Stadium
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.Capacity,
			&i.IsAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStadium = `-- name: UpdateStadium :exec
UPDATE stadiums
SET name = coalesce($2, name),
    location = coalesce($3, location),
    capacity = coalesce($4, capacity),
    is_available = coalesce($5, is_available)
WHERE id=$1
`

type UpdateStadiumParams struct {
	ID          int32          `json:"id"`
	Name        sql.NullString `json:"name"`
	Location    sql.NullString `json:"location"`
	Capacity    sql.NullInt32  `json:"capacity"`
	IsAvailable sql.NullBool   `json:"is_available"`
}

func (q *Queries) UpdateStadium(ctx context.Context, arg UpdateStadiumParams) error {
	_, err := q.db.ExecContext(ctx, updateStadium,
		arg.ID,
		arg.Name,
		arg.Location,
		arg.Capacity,
		arg.IsAvailable,
	)
	return err
}
